執行順序:
cd webBaha
perl w14.pl  (或 perl w14.pl {指定最後篇數} )
perl ../check_continue.pl baha*.txt (正常是沒東西, 有數字再跑 w07.pl)
perl ../merge baha*.txt >20040627.txt
perl ../statistics.pl 20040627.txt 06/27 1000

在 24:00 後可以用
cd webBaha
./last1 w14.pl

web 貼文程式是 webpost06.pl, 在一個有 stat.txt (統計結果) 的目錄執行
  perl webpost06.pl Chat 06/27 uid_pass.txt
                    ^^^^ ^^^^^ ^^^^^^^^^^^^
                    板名 日期  帳號密碼檔
板名大小寫有差, 像 test 板就全為小寫, 而 Chat 是首字大寫
帳號密碼檔只要兩行, 第一行帳號, 第二行密碼(明碼), 可以放在其他目錄.

最後面有這些程式壓縮檔(uuencoded), 可以不用一個檔一個檔拆.
把這篇文章存成一個檔, 例如 a.txt, 然後
  uudecode a.txt
會多出一個 chat-stat.tgz, 再來
  gzip -cd chat-stat.tgz | tar xvf 就會解開



::::::::::::::
dates.pl
::::::::::::::
#!/usr/bin/perl
#

sub CSTtime () {
    return time+8*3600;
}

sub year_mon_day ($) {
    my $time = shift || time;
    my ($mday,$mon,$year_1900) = (gmtime($time))[3,4,5];
    my $year=$year_1900+1900;
    return sprintf("%04d %02d %02d", $year, $mon+1, $mday);
}

my $today = &year_mon_day(&CSTtime);
my $yesterday = &year_mon_day(&CSTtime - 86400);
my $P2D = &year_mon_day(&CSTtime - 2*86400);

print join(" ", $P2D, $yesterday, $today);

::::::::::::::
days_statistics.pl
::::::::::::::
#!/usr/bin/perl
#

my (%first, %last);
my (%authors, %titles);
my (%selfErase);
my ($articles, $deleted);

while (my $dir = shift) {
    next if ! -d $dir;
    my $date = "";
    # --- get date -----------------
    1 while $dir =~ s#/$##;
    if ($dir =~ m#.*/([^/]+)$#) { $date = $1; }
    else { $date = $dir; }
    $date = substr($date, 0, 8);
    # ==============================
    next if (! $date =~ /^\d{8}$/);
    next if ! -f "$dir/stat.txt";
    next if ! -f "$dir/$date.txt";

    my ($start, $last) = &getStartLast("$dir/stat.txt");
    my $slashdate = substr($date,4,2)."/".substr($date,6,2);
    open LIST, "<$dir/$date.txt";
    while (<LIST>) {
        next if (substr($_, 10, 5) ne $slashdate);
        next if (substr($_, 1, 5) lt $start);
        last if (substr($_, 1, 5) gt $last);
        chomp;
        s/\r//g; s/\n//g;
        my $author = substr($_, 16, 12);
        $author =~ s/ +$//;
        my $title = substr($_, 32);
        $first{$date} = $_ if (substr($_, 1, 5) eq $start);
        $last{$date} = $_ if (substr($_, 1, 5) eq $last);

        $authors{$author}++;
        if (lc(substr($_, 7, 1)) eq "d") {
            $deleted++;
            if ($title =~ /\($author\)/) {
                $selfErase{$author}++;
            }
            next;
        }
        $articles++;
        $titles{$title}++;
    }
    close LIST;

    print "$date $slashdate $start-$last\n";
}

#&printAuthors;
&printTitles;

sub topN ($$$) {
    my ($pList, $nTop, $nChar) = @_;
    my $result;

    my $n = 0;
    my $nLast = 0;
    foreach my $i (sort { $b cmp $a } @$pList) {
        $result .= "$i\n" if $n++ < $nTop;
        $nLast = substr($i, 1, $nChar) if $n == $nTop;
        if (substr($i, 1, $nChar) < $nLast) {
            last;
        }
        elsif ($n > $nTop) {
            $result .= "$i\n";
        }
    }
    return $result;
}

sub printTitles {
    foreach my $i (keys %titles) {
        push @sortTitles, sprintf("%6s | %s", $titles{$i}, $i);
    }

    my @titlesNormal;
    my @titlesPopular;

    foreach my $i (@sortTitles) {
        if ($i =~ /[0-9]/) {
            if ($i =~ /(推廣|日目|航目)/) {
                push @titlesPopular, $i;
            }
            else {
                push @titlesNormal, $i;
            }
        }
    }

    my @sumTitlesPop = ("111111 | \xFF\xFF");
    my %mainTitlesPop;
    for my $i (sort { substr($a, index($a,"|")+2) cmp
            substr($b, index($b,"|")+2) } @titlesPopular) {
        $sumTitlesPop[$#sumTitlesPop] =~ /^\s*(\d+)\s\|\s(.+)$/;
        my ($nPrev, $titlePrev) = ($1, $2);
        $i =~ /^\s*(\d+)\s\|\s(.+)$/;
        my ($nCur, $titleCur) = ($1, $2);
        my ($ox, $titleMain) = &cmpSimilar($titlePrev, $titleCur);
        if ($ox eq "O") {
            pop @sumTitlesPop;
            push @sumTitlesPop, sprintf("%6s | %s", $nPrev+$nCur, $titlePrev);
            $mainTitlesPop{$titlePrev} = $titleMain;
        }
        else {
            push @sumTitlesPop, $i;
        }
    }
    shift @sumTitlesPop;

    for my $i (@sumTitlesPop) {
        $i =~ /^\s*(\d+)\s\|\s(.+)$/;
        my ($nCur, $titleCur) = ($1, $2);
        if (defined $mainTitlesPop{$titleCur}) {
            $i = sprintf("%6s | %s", $nCur, $mainTitlesPop{$titleCur});
        }
    }

    # --- print normal titles -----------------------------------
    print <<EOF;
     # |   Titles
-------+---------------------------------------------
EOF
    print &topN(\@titlesNormal, 40, 6);
    print "\n";
    # ===========================================================

    # --- print popularized titles ------------------------
    print <<EOF;
推廣成果:
     # |   Titles
-------+---------------------------------------------
EOF
    print &topN(\@sumTitlesPop, 20, 6);
    print "\n";
    # =====================================================
    print "\n";

}

sub printAuthors {
    print <<EOF;
     # |  Authors
-------+---------------------------------------------
EOF
    foreach my $i (keys %authors) {
        my $name = $i;
        $name = substr($i,0,1).("*" x (length($i)-2)).substr($i,-1,1);
        substr($name,0,1) = "*" if length($name)==2;
        push @sortAuthors, sprintf("%6s | %1s", $authors{$i}, $name);
    }
    print &topN(\@sortAuthors, 30, 6);
    print "\n";
}

sub getStartLast ($) {
    my $stat = shift;
    my ($start, $last) = undef;

    open STAT, "<$stat";
    while (<STAT>) {
        $start = sprintf("%5d",$1) if /^start = (\d+)/;
        $last = sprintf("%5d",$1) if /^last = (\d+)/;
    }
    close STAT;
    return ($start,$last);
}

sub cmpSimilar ($$) {
    my $a = shift;
    my $b = shift;
    my ($maina, $mainb) = ($a, $b);
    my ($main1, $main2) = ($maina, $mainb);
    ($main1, $main2) = ($main2, $main1) if (length($main1)>length($main2));
    if (substr($main2,0,length($main1)) eq $main1
        && substr($main2,length($main1)) =~ /^[a-zA-Z ]{0,3}$/) {
        return ("O", $maina);
    }

    my @a = grep /./, split(/([\x80-\xFF].|.)/,$a);
    my @b = grep /./, split(/([\x80-\xFF].|.)/,$b);
    my $i = 0;
    sub isNumChi;
    for $i (0 .. $#a) {
        last if $i > $#b;
        if ($a[$i] ne $b[$i]) {
            if (&isNumChi($a[$i]) || &isNumChi($b[$i])) {
                my $ja = $i;
                my $jb = $i;
                my $ka = $i;
                my $kb = $i;
                --$ja if (defined $a[$i-1] && &isNumChi($a[$i-1])
                    && ! &isNumChi($a[$i]));
                --$jb if (defined $b[$i-1] && &isNumChi($b[$i-1])
                    && ! &isNumChi($b[$i]));
                --$ja while ($ja > 0 && &isNumChi($a[$ja]));
                --$jb while ($jb > 0 && &isNumChi($b[$jb]));
                if ($ja != $jb) {
                    return ("X", $maina);
                }
                ++$ka while ($ka<=$#a && &isNumChi($a[$ka]));
                ++$kb while ($kb<=$#b && &isNumChi($b[$kb]));
                my $maina = join("", @a[0 .. $ja], "---", @a[$ka .. $#a]);
                my $mainb = join("", @b[0 .. $jb], "---", @b[$kb .. $#b]);

                ($main1, $main2) = ($maina, $mainb);
                ($main1, $main2) = ($main2, $main1) if (length($main1)
                    >length($main2));
                if (substr($main2,0,length($main1)) eq $main1
                    && substr($main2,length($main1)) =~ /^[a-zA-Z ]{0,2}$/) {
                    return ("O", $maina);
                }
                else {
                    return ("X", $maina);
                }
                return;
            }
            elsif ($a[$i] =~ /\d/ || $b[$i] =~ /\d/) {
                my $ja = $i;
                my $jb = $i;
                my $ka = $i;
                my $kb = $i;
                --$ja if (defined $a[$i-1] && $a[$i-1] =~ /\d/
                    && ! ($a[$i] =~ /\d/));
                --$jb if (defined $b[$i-1] && $b[$i-1] =~ /\d/
                    && ! ($b[$i] =~ /\d/));
                --$ja while ($ja > 0 && $a[$ja] =~ /\d/);
                --$jb while ($jb > 0 && $b[$jb] =~ /\d/);
                if ($ja != $jb) {
                    return ("X", $maina);
                }
                ++$ka while ($ka<=$#a && $a[$ka] =~ /\d/);
                ++$kb while ($kb<=$#b && $b[$kb] =~ /\d/);
                my $maina = join("", @a[0 .. $ja], "---", @a[$ka .. $#a]);
                my $mainb = join("", @b[0 .. $jb], "---", @b[$kb .. $#b]);

                ($main1, $main2) = ($maina, $mainb);
                ($main1, $main2) = ($main2, $main1) if (length($main1)
                    >length($main2));
                if (substr($main2,0,length($main1)) eq $main1
                    && substr($main2,length($main1)) =~ /^[a-zA-Z ]{0,2}$/) {
                    return ("O", $maina);
                }
                else {
                    return ("X", $maina);
                }
                return;
            }
            else {
                return ("X", $a);
            }
        }
    }
}

sub isNumChi ($) {
    my $c = shift;
    if ($c eq '零' || $c eq '一' || $c eq '二' || $c eq '三'
        || $c eq '四' || $c eq '五' || $c eq '六' || $c eq '七'
        || $c eq '八' || $c eq '九' || $c eq '十' || $c eq '百'
        || $c eq '千' || $c eq '幾' ) {
        return 1;
    }
    return 0;
}

::::::::::::::
dump_lists.pl
::::::::::::::
#!/usr/bin/perl
#
use strict;
use IO::Handle;
my $fAppend = shift || exit;
my $hh = shift || exit;
@ARGV > 0 or exit;

my @document = @ARGV;
sub dump1list;
my $hdmp;
open $hdmp, ">>$fAppend" or die;
binmode $hdmp;
$hdmp->autoflush(1);


foreach my $i (0 .. $#document) {
    my $document = $document[$i];
    my $list;
    $list = "";
    print "http://$hh/$document";
    $list = dump1list($hh, $document);
    if ($list ne "") {
        print " -> get\n";
        print $hdmp $list;
    }
    else {
        print " -> fail\n";
    }
}

close $hdmp;
exit;

sub dump1list ($$) {
    my ($host, $fileRelative) = @_;
    my $timeInit = time;
    my $port = 80;

    # --- try to find if the system has gzip --------
    my $EOL = "\015\012";
    my $msgGetGzip = 
"GET /$fileRelative HTTP/1.0".$EOL.
"Host: $host".$EOL.
"Accept: text/html, text/plain, text/sgml, */*;q=0.01".$EOL.
"Accept-Encoding: gzip, compress".$EOL.
"Accept-Language: en".$EOL.
"User-Agent: Perl".$EOL.
"";

    my $msgGet = $msgGetGzip;
    # ===============================================

    # --- send the request ----------------------------
    use IO::Socket;
    # http://webbbs.gamer.com.tw/board.php?brd=Chat
    my $sock = IO::Socket::INET->new("${host}:${port}") or die "socket create
error\n";
    $sock->print($msgGet.$EOL);
    # =================================================

    # --- setup some variables for select(...) ------
    my ($rin, $win, $ein);
    $rin = $win = $ein = '';
    vec($rin, fileno($sock), 1) = 1;
    vec($win, fileno($sock), 1) = 1;
    $ein = $rin | $win;
    # ===============================================

    print "getting...";
    # --- get the response ------------------
    my $response = "";
    while (! $sock->eof) {
        my ($rout, $wout, $eout) = ($rin, $win, $ein);
        my ($nfound, $timeleft) = select($rout, $wout, $eout, 0.05);
        if ($nfound > 0) {
            my $buf;
            $sock->read($buf, 10000);
            $response.=$buf;
        }
        last if (time - $timeInit > 10);
    }
    $sock->close;
    select(undef, undef, undef, 0.05) while (time == $timeInit);
    # =======================================

    # --- parse the response -------------------
    my $idx_rnrn = index($response, "\r\n\r\n");
    return "" if ($idx_rnrn < 0);

    my @header = split(/\r\n/, substr($response, 0, $idx_rnrn+1));
    my $content = substr($response, $idx_rnrn+4);

    my $isVaryAcceptEncoding = 0;
    my $contentLength = 0;
    my $contentEncoding = "text";
    foreach (@header) {
        s/[\r\n]//g;
        if (/^Vary:/ && /Accept-Encoding/) {
            $isVaryAcceptEncoding = 1;
        }
        elsif (/^Content-Length: (\d+)$/) {
            $contentLength = $1 + 0;
        }
        elsif (/^Content-Encoding: (.+)$/) {
            $contentEncoding = $1;
        }
    }
    # ==========================================

    # --- exit if the content is inconsistent ---------
    if ((length($content) != $contentLength && $contentLength > 0)
        || length($content) == 0) {
        # print STDERR "length unmatch\n";
        return "";
    }
    # =================================================

    # --- print the content -------------
    if ($contentEncoding =~ /gzip/) {
        use Compress::Zlib;
        $content = Compress::Zlib::memGunzip($content);
    }
    return &htm2list($content);
    # ===================================
}

exit;

sub htm2list ($) {
#    my $content = shift;
#    my @list = grep(/./,split(/\n/,$content));
    my @lineBuf;
    for my $i (0 .. 11) {
        $lineBuf[$i] = "";
    }
    my ($num, $mark, $gy, $date, $author, $title);

    my $outlist = "";
    for ( grep(/./, split(/\n/, shift)) ) {
        chomp;
        shift @lineBuf;
        push @lineBuf, $_;

        if ($lineBuf[9] =~ /readPost/ || ($lineBuf[5] =~ /queryUser/ && 
                $lineBuf[9] =~ /^<font.*>/)) {
            $lineBuf[1] =~ /^<.*>(\d+)<\/.*>/;
            $num = $1;

            $lineBuf[3] =~ m#^(.*)</td>#;
            $mark = lc(substr($1." ",0,1));

            $lineBuf[4] =~ m#^<td.*>../(../..)</td>#;
            $date = $1;

            $lineBuf[5] =~ m#^<td><a .*>(.*)</a></td>#;
            $author = $1;

            if ($lineBuf[7] =~ /\"javascript:thread\(\'(.*)\'\)\"/) {
                $title = $1;
            } elsif ($lineBuf[9] =~ m#<font.*>(.*)</font></td>#) {
                $title = $1;
            }

            $title = "◇ ".$title if $title !~ /^Re: /;
            $title = "Re ".substr($title,4) if $title =~ /^Re: /;
            $title =~ s/&gt;/>/g;
            $title =~ s/&lt;/</g;
            $title =~ s/&nbsp;/ /g;
            $title =~ s/&quot;/\"/g;
            $title =~ s/&amp;/\&/g;

            if ($lineBuf[10] =~ m#<td><em>(\d+)</em></td>#) {
                $gy = $1;
                $gy = 99 if $gy>99;
                $gy = sprintf("%02d",$gy);
            }
            else {
                $gy = "";
            }

            $outlist .= sprintf(" %5d %1s%2s%5s %-12s %s\015\012",
                $num, $mark, $gy, $date, $author, $title);
        }
    }
    return $outlist;
}

::::::::::::::
get_n_list.pl
::::::::::::::
#!/usr/bin/perl
#

use Fcntl;

# --- define some literals -------------------------
$chat = "http://webbbs.gamer.com.tw/board.php?brd=Chat";
$page = "&p";
# ==================================================

# --- get the last of current articles ------------------------
my ($last, $end) = &endOfList($chat);
print "$chat -> $last\n";
print "\$end = $end\n";
# ============================================================

# --- get baha files --------
my @fileBaha = ();
my $outfileBaha = undef;
for my $i (1 .. 99) {
    my $tFileBaha = sprintf("baha%02d.txt", $i);
    if (-f $tFileBaha) {
        push @fileBaha, $tFileBaha;
    }
    elsif (! defined($outfileBaha)) {
        $outfileBaha = $tFileBaha;
    }
}
# ===========================

# --- the ranges to dump ------------------------
if (scalar(@fileBaha)) {
    my $preEnd = 1;
    push @ARGV, $_ foreach ( &check_continue(@fileBaha) );
    $preEnd = &preEnd(@fileBaha);
    print "preEnd = $preEnd\n";
    push @ARGV, "$preEnd-$end";
}
else {
    unshift @ARGV, "1-$end";
}
# =============================================

print join(",", @ARGV), "\n";
$outfileBaha = $outfileBaha;
print "output file -> $outfileBaha\n";

foreach my $range (@ARGV) {
    next if ! ($range =~ /^(\d+)-(\d+)$/);
    print STDERR "$1-$2\n";
    my $start = $1;
    my $end = $2;
    next if $start > $end;

    my @listDocs;
    my ($host, $port, $fileRelative);
    for my $i ( ($start+29)/30-1 .. ($end+29)/30+1 ) {
        next if $i<=0;
        my $url = "$chat$page=$i";
        if ($url =~ m#^http://([\w\.-]+)(:(\d+))?/(.*)$#) {
            $host = $1;
            $port = $3 if $3 ne "";
            $fileRelative = $4;
            push @listDocs, $fileRelative;
        }
    }
    if (@listDocs > 0) {
        system("perl", "-w", "dump_lists.pl", $outfileBaha, $host, @listDocs);
    }
#       &readPage($url, $outfileBaha);
}
exit;

sub readPage ($$) {
    my $urlA;
    my $outfileBahaA;
    $urlA = $_[0];
    $outfileBahaA = $_[1];

    print "$urlA\n";
    my $listArticle = &dump1list($urlA);

    open OUTPUT, ">>$outfileBahaA";
    print OUTPUT $listArticle;
    close OUTPUT;
}

sub check_continue {
    my %num;
    foreach my $file (@_) {
        open CONTINUE, "<$file" or die;
        while (<CONTINUE>) {
            next if !/^[> ][ 0-9]{5}/;
            $num{substr($_,1,5)} = 1;
        }
        close CONTINUE;
    }
    my @b;
    my @a;
    @b = @a = sort keys %num;
    unshift @a, 1;
    my @list;
    for my $i (0 .. $#b) {
        if ($b[$i] - $a[$i] > 1) {
            push @list, sprintf("%d-%d", $a[$i], $b[$i]-1);
        }
    }
    return @list;
}

sub preEnd {
    my $preEnd = 1;
    foreach my $file (@_) {
        open INFILE, "<$file" or die;
        while (<INFILE>) {
            next if !/^[> ][ 0-9]{5}/;
            my $num = substr($_,1,5);
            $num = $num + 0;
            $preEnd = $num if $num > $preEnd;
        }
        close INFILE;
    }
    return $preEnd;
}

sub endOfList ($) {
    my $chat = shift;
    my @a = split(/\n/,&dump1list($chat));
    my $last = substr($a[-1], 1, 5);
    chomp $last;
    my $end = 0;
    if ($#ARGV==0 && $ARGV[0] =~ /^\d+$/) {
        $end = shift(@ARGV);
        $end = $last if $last < $end;
    }
    elsif ($#ARGV == -1) {
        $end = $last;
    }
    return ($last+0, $end+0);
}

sub dump1list ($) {
    my ($host, $port, $fileRelative);
    while ($_ = shift) {
        if (m#^http://([\w\.-]+)(:(\d+))?/(.*)$#) {
            $host = $1;
            $port = $3 if $3 ne "";
            $fileRelative = $4;
            last;
        }
    }

    my $content = "";
    system("perl", "-w", "dump_lists.pl", "dump1list.temp.txt", $host,
$fileRelative);
    open DMPFILE, "<dump1list.temp.txt" or die;
    $content .= $_ while (<DMPFILE>);
    close DMPFILE;
    unlink "dump1list.temp.txt";
    return $content;
}

::::::::::::::
last1.pl
::::::::::::::
#!/usr/bin/perl
#

$usage = <<USAGE;
Usage:
  perl $0 exeGetList [yr1 mon1 mday1 yr2 mon2 mday2 yr3 mon3 mday3]
  exeGetList:      the perl script to get article list
  yr1,mon1,mday1:  the day before yesterday
  yr2,mon2,mday2:  yesterday
  yr3,mon3,mday3:  today
    yr? is 4-char integer; mon? is 2-char; mday is 2-char. If no enough
    digits, please add leading 0. If any of yr? or mon? or mday? is not
    supplied, dates.pl will be called to get these.
USAGE
$exeGetList = shift or die $usage;
-f $exeGetList or die "$exeGetList not exists!\n$usage";

# --- get the year / month / mday ---------
my ($p2d_yr, $p2d_mon, $p2d_mday,
    $yesterday_yr, $yesterday_mon, $yesterday_mday,
    $today_yr, $today_mon, $today_mday);

if ($#ARGV == 8) {
    # get year / month / mday by argument list
    ($p2d_yr, $p2d_mon, $p2d_mday,
        $yesterday_yr, $yesterday_mon, $yesterday_mday,
        $today_yr, $today_mon, $today_mday)
    = splice(@ARGV, 0, 9);
}
else {
    # get year / month / mday by dates.pl
    ($p2d_yr, $p2d_mon, $p2d_mday,
        $yesterday_yr, $yesterday_mon, $yesterday_mday,
        $today_yr, $today_mon, $today_mday)
    = split(/ /, `perl dates.pl`);
}

$today = "$today_mon/$today_mday";
$yesterday = "$yesterday_mon/$yesterday_mday";
$yesterday8 = "$yesterday_yr$yesterday_mon$yesterday_mday";
$p2d = "$p2d_mon/$p2d_mday";

#print join("\n", $today, $yesterday, $yesterday8, $p2d, "");
# =========================================

my @fileBaha = ();
my $outfileBaha;
&refreshFileBaha;

while (1) {
    my @tail30 = (&merge(@fileBaha))[-30 .. -1];
    my @t = grep(/^.{10}$today/, @tail30);
    last if scalar(@t) == 30;
    sleep 30;
    &runGetList($exeGetList);
}

for my $i (1 .. 10) {
    my @t = &check_continue(@fileBaha);
    last if ! scalar(@t);
    &runGetList($exeGetList,1);
}

my @listYesterday8 = &merge(@fileBaha);
open YESTERDAY8, ">$yesterday8.txt";
print YESTERDAY8 join("\n", @listYesterday8, "");
close YESTERDAY8;

# --- try to find the begin number of yesterday articles ---
my $begin = substr( (grep(/^.{10}$p2d/, @listYesterday8))[-1], 1, 5);
$begin-=100;
if ($begin <=0) {
    $begin = 1;
}
elsif ($begin > 1000) {
    $begin = 1000;
}
#print "\$begin = $begin\n";
# ==========================================================

print "Generating statistics...\n";
system("perl ../statistics.pl $yesterday8.txt $yesterday $begin >stat.txt");
mkdir $yesterday8 if ! -d $yesterday8;
foreach (@fileBaha, "$yesterday8.txt", "stat.txt") {
    rename $_, "$yesterday8/$_";
}
exit;

sub refreshFileBaha {
    @fileBaha = ();
    $outfileBaha = undef;
    for my $i (1 .. 99) {
        $tFileBaha = sprintf("baha%02d.txt", $i);
        if (-f $tFileBaha) {
            push @fileBaha, $tFileBaha;
        }
        elsif (! defined($outfileBaha)) {
            $outfileBaha = $tFileBaha;
        }
    }
}

sub merge {
    my %strings;
    my @list = ();
    foreach my $file (@_) {
        open INFILE, "<$file" or die;
        while (<INFILE>) {
            s/[\r\n]//g;
            next if !/^[> ][ 0-9]{5}/;
            my $num = substr($_,1,5);
            s/^>/ /;
            $strings{$num} = $_;
        }
        close INFILE;
    }
    for $i (sort keys %strings) {
        push @list, "$strings{$i}";
    }
    return (@list);
}

sub check_continue {
    my %num;
    foreach my $file (@_) {
        open CONTINUE, "<$file" or die;
        while (<CONTINUE>) {
            next if !/^[> ][ 0-9]{5}/;
            $num{substr($_,1,5)} = 1;
        }
        close CONTINUE;
    }
    my @b;
    my @a;
    @b = @a = sort keys %num;
    unshift @a, 1;
    my @list;
    for my $i (0 .. $#b) {
        if ($b[$i] - $a[$i] > 1) {
            push @list, sprintf("%d-%d", $a[$i], $b[$i]-1);
        }
    }
    return @list;
}

sub runGetList {
    system("perl", @_);
    &refreshFileBaha;
}

::::::::::::::
run_daily.pl
::::::::::::::
#!/usr/bin/perl
#

$usage = <<USAGE;
Usage:
  perl $0 exeGetList uid_pass.txt
  exeGetList:      the perl script to get article list
  uid_pass.txt:    uid & password file, select non-existent file means
                   not to webpost
USAGE

$exeGetList = shift or die $usage;
-f $exeGetList or die "$exeGetList not exists!\n$usage";
$fileUidPasswd = shift or die $usage;
-f $fileUidPasswd or print "$fileUidPasswd not found -> will not post\n";

my @fileBaha = ();
my $outfileBaha;
&refreshFileBaha;

my %do_at;
while (1) {
    my $hrmin = &date("+%H%M");
    my $hr = substr($hrmin,0,2);
    my $min = substr($hrmin,2,2);
    last if $hrmin le "0300";

    if (($hr =~ /^(06|18|22)$/) && ! defined $do_at{$hr."00"}) {
        &runGetList($exeGetList);
        $do_at{$hr."00"} = 1;
    }
    elsif (($hrmin gt "2330") && ! defined $do_at{"2330"}) {
        &runGetList($exeGetList);
        $do_at{"2330"} = 1;
    }
    elsif ($hrmin gt "0700") {
        &refreshFileBaha;
        if (0 == scalar(@fileBaha)) {
            &runGetList($exeGetList);
        }
    }

    my $hrmin = &date("+%H%M");
    $hr = substr($hrmin,0,2);
    $min = substr($hrmin,2,2);
    my $minWait = 10;

    last if $hrmin le "0300";
    if ($hrmin le "0600") {
        $minWait = 60;
    }
    elsif ($hrmin gt "2330") {
        $minWait = 1;
    }

    my $secWait = $minWait*60;
    printf("%s - sleep for %d secs\n", &date, $secWait);
    sleep $secWait;
}

# --- get the year / month / mday ------------------
($p2d_yr, $p2d_mon, $p2d_mday,
    $yesterday_yr, $yesterday_mon, $yesterday_mday,
    $today_yr, $today_mon, $today_mday) = split(/ /, `perl dates.pl`);

$yesterday = "$yesterday_mon/$yesterday_mday";
$yesterday8 = "$yesterday_yr$yesterday_mon$yesterday_mday";
-d $yesterday8 && exit;
# ==================================================

print "Call last1.pl...\n";
system("perl", "last1.pl", $exeGetList,
    $p2d_yr, $p2d_mon, $p2d_mday,
    $yesterday_yr, $yesterday_mon, $yesterday_mday,
    $today_yr, $today_mon, $today_mday);

if (-f $fileUidPasswd) { 
    print "Posting...\n";
    &cp("$yesterday8/stat.txt", "stat.txt");
    system("perl webpost07.pl Chat $yesterday $fileUidPasswd");
    unlink "stat.txt";
}
exit;

sub refreshFileBaha {
    @fileBaha = ();
    $outfileBaha = undef;
    for my $i (1 .. 99) {
        my $tFileBaha = sprintf("baha%02d.txt", $i);
        if (-f $tFileBaha) {
            push @fileBaha, $tFileBaha;
        }
        elsif (! defined($outfileBaha)) {
            $outfileBaha = $tFileBaha;
        }
    }
}

sub runGetList {
    system("perl", @_);
    &refreshFileBaha;
}

sub CSTtime () {
    return time+8*3600;
}

use POSIX qw(strftime);
sub date ($) {
    my $strFormat = shift || "%a %b %e %H:%M:%S %Y";
    $strFormat =~ s/^\+//g;
    return strftime($strFormat, gmtime(&CSTtime));
}

sub cp ($$) {
    my ($from, $to) = @_;
    my ($buf);
    
    open(FROM, "$from") || die "Can't open $from\n";
    open(TO, ">$to")    || die "Can't open $to\n";

    while(read (FROM, $buf, 16384)) {
        print TO $buf;
    }
    close(FROM);
    close(TO);
}

::::::::::::::
webpost07-1.pl
::::::::::::::
#!/usr/bin/perl
#

use strict;
my $gBrdName = shift;
my $gDate = shift;
my $file_uid_pass = shift;

if (!($gBrdName =~ /^\w+$/ && $gDate =~ m#^\d\d/\d\d$#
        && -f $file_uid_pass && -f "stat.txt" )) {
    print <<USAGE;
Usage: perl $0 boardname date uid_pass_file
    The form of parameter 'date' is 'mm/dd'.
    Please execute this program in a directory with 'stat.txt'.
USAGE
    exit;
}

open IDPASS, "<".$file_uid_pass;
my ($gUid, $gPasswd) = <IDPASS>;
close IDPASS;
$gUid =~ s/[\r\n]//g;
$gPasswd =~ s/[\r\n]//g;
$gPasswd = substr($gPasswd, 0, 8);

use LWP::UserAgent;
use HTTP::Cookies;
use HTTP::Request::Common qw(GET POST);

my $ua = LWP::UserAgent->new;
my $cookie_jar = HTTP::Cookies->new(
    ignore_discard => 1, file => "./baha_cookie.txt");
$ua->cookie_jar($cookie_jar);
$ua->protocols_allowed(undef);

# --- login ---------------------------------------
my $req = HTTP::Request->new(
    POST => 'https://user.gamer.com.tw/doLogin.php') or die;
$req->content_type('application/x-www-form-urlencoded');
$req->content("uid=$gUid&passwd=$gPasswd");
my $res = $ua->request($req);   # 須有這行才會登入
if ($res->is_success) {
    print $res->as_string;
}
else {
    print "Failed: ", $res->status_line, "\n";
}
# =================================================

$cookie_jar->save;

exit;

::::::::::::::
webpost07-2.pl
::::::::::::::
#!/usr/bin/perl
#

use strict;
my $gBrdName = shift;
my $gDate = shift;
my $file_uid_pass = shift;

if (!($gBrdName =~ /^\w+$/ && $gDate =~ m#^\d\d/\d\d$#
        && -f $file_uid_pass && -f "stat.txt" )) {
    print <<USAGE;
Usage: perl $0 boardname date uid_pass_file
    The form of parameter 'date' is 'mm/dd'.
    Please execute this program in a directory with 'stat.txt'.
USAGE
    exit;
}
open IDPASS, "<".$file_uid_pass;
my ($gUid, $gPasswd) = <IDPASS>;
close IDPASS;
$gUid =~ s/[\r\n]//g;
$gPasswd =~ s/[\r\n]//g;
$gPasswd = substr($gPasswd, 0, 8);

my $txtStat = "";
open txtStat, "<stat.txt";
$txtStat = join("","\n",<txtStat>);
close txtStat;

use LWP::UserAgent;
use HTTP::Cookies;
use HTTP::Request::Common qw(GET POST);

my $ua = LWP::UserAgent->new;
my $cookie_jar = HTTP::Cookies->new(
    ignore_discard => 1, file => "./baha_cookie.txt");
$cookie_jar->load;
$ua->cookie_jar($cookie_jar);
$ua->protocols_allowed(undef);

# --- get some information when doing post -----------
my $req2 = HTTP::Request->new(GET =>
    "http://webbbs.gamer.com.tw/post.php?brd=$gBrdName");
my $res = $ua->request($req2);
unless ($res->is_success) {
    print "Failed: ", $res->status_line, "\n";
    print $res->as_string, "\n";
    exit;
}
my ($postPHP, $brd, $viapost, $userid,
    $stamp) = &getInfoToPost($res->as_string);

open INFO, ">post_info.txt";
print INFO join("\n", $postPHP, $brd, $viapost, $userid, $stamp);
close INFO;
# ====================================================
exit;


sub getInfoToPost ($) {
    my @html = split('\n', shift);
    my ($postPHP, $brd, $viapost, $userid, $stamp);
    $postPHP = 0;
    foreach (@html) {
        if (/^<form\s+name=postform\s+method=post\s+action=\"post\.php\">/) {
            $postPHP = 1;
        }
        if (/<input\s+type=hidden\s+name=brd\s+value=\"(\w+)\">/) {
            $brd = $1;
        }
        if (/<input\s+.*\s+name=\"viapost\"\s+value=\"(\w+)\">/) {
            $viapost = $1;
        }
        if (/<input\s+.*\s+name=\"userid\"\s+value=\"(\w+)\">/) {
            $userid = $1;
        }
        if (/<input\s+.*\s+name=\"stamp\"\s+value=(\w+)>/) {
            $stamp = $1;
        }
    }
    return ($postPHP, $brd, $viapost, $userid, $stamp);
}

::::::::::::::
webpost07-3.pl
::::::::::::::
#!/usr/bin/perl
#

use strict;
my $gBrdName = shift;
my $gDate = shift;
my $file_uid_pass = shift;

if (!($gBrdName =~ /^\w+$/ && $gDate =~ m#^\d\d/\d\d$#
        && -f $file_uid_pass && -f "stat.txt" )) {
    print <<USAGE;
Usage: perl $0 boardname date uid_pass_file
    The form of parameter 'date' is 'mm/dd'.
    Please execute this program in a directory with 'stat.txt'.
USAGE
    exit;
}

my $txtStat = "";
open txtStat, "<stat.txt";
$txtStat = join("","\n",<txtStat>);
close txtStat;

my ($postPHP, $brd, $viapost, $userid, $stamp);
open INFO, "<post_info.txt";
($postPHP = <INFO>) =~ s/[\r\n]//g;
($brd = <INFO>) =~ s/[\r\n]//g;
($viapost = <INFO>) =~ s/[\r\n]//g;
($userid = <INFO>) =~ s/[\r\n]//g;
($stamp = <INFO>) =~ s/[\r\n]//g;
close INFO;

use LWP::UserAgent;
use HTTP::Cookies;
use HTTP::Request::Common qw(GET POST);

my $ua = LWP::UserAgent->new;
my $cookie_jar = HTTP::Cookies->new(
    ignore_discard => 1, file => "./baha_cookie.txt");
$cookie_jar->load;
$ua->cookie_jar($cookie_jar);
$ua->protocols_allowed(undef);

foreach (1) {

    my $res;
    # --- post -----------------------------------
    if ($postPHP == 1 && $brd eq "$gBrdName") {
        my $req2 = POST("http://webbbs.gamer.com.tw/post.php?brd=$brd",
            [ brd => $brd,
            atype => '',
            title => "$gDate 洽文統計",
            content => "$txtStat",
            sign => 0,
            viapost => "$viapost",
            userid => "$userid",
            stamp => "$stamp" ]);
        $res = $ua->request($req2);
        print $res->as_string;
    }
    else {
        print $res->as_string;
        print "Failed to post!\n";
    }
    # ============================================

    last;
}
exit;

::::::::::::::
webpost07-4.pl
::::::::::::::
#!/usr/bin/perl
#

use strict;
my $gBrdName = shift;
my $gDate = shift;
my $file_uid_pass = shift;

if (!($gBrdName =~ /^\w+$/ && $gDate =~ m#^\d\d/\d\d$#
        && -f $file_uid_pass && -f "stat.txt" )) {
    print <<USAGE;
Usage: perl $0 boardname date uid_pass_file
    The form of parameter 'date' is 'mm/dd'.
    Please execute this program in a directory with 'stat.txt'.
USAGE
    exit;
}

use LWP::UserAgent;
use HTTP::Cookies;
use HTTP::Request::Common qw(GET POST);

my $ua = LWP::UserAgent->new;
my $cookie_jar = HTTP::Cookies->new(
    ignore_discard => 1, file => "./baha_cookie.txt");
$cookie_jar->load;
$ua->cookie_jar($cookie_jar);
$ua->protocols_allowed(undef);

foreach (1) {
    # --- logout ----------------------------------------
    my $req = HTTP::Request->new(
        HEADER => 'https://user.gamer.com.tw/logout.php');
    print $ua->request($req)->as_string;
    # ===================================================
    last;
}
exit;

::::::::::::::
webpost07.pl
::::::::::::::
#!/usr/bin/perl
# In version 06, all operations are put in one file. But it has
# problem when run with ActivePerl on my machine (OS: win2k SP3):
# LWP::UserAgent can only run once in one process. So I split them
# into different files, and store cookie and some information for
# posting an article.

use strict;
my $gBrdName = shift;
my $gDate = shift;
my $file_uid_pass = shift;

if (!($gBrdName =~ /^\w+$/ && $gDate =~ m#^\d\d/\d\d$#
        && -f $file_uid_pass && -f "stat.txt" )) {
    print <<USAGE;
Usage: perl $0 boardname date uid_pass_file
    The form of parameter 'date' is 'mm/dd'.
    Please execute this program in a directory with 'stat.txt'.
USAGE
    exit;
}

system("perl", "-w", "webpost07-1.pl", $gBrdName, $gDate, $file_uid_pass);
sleep 5;
system("perl", "-w", "webpost07-2.pl", $gBrdName, $gDate, $file_uid_pass);
sleep 5;
system("perl", "-w", "webpost07-3.pl", $gBrdName, $gDate, $file_uid_pass);
sleep 5;
system("perl", "-w", "webpost07-4.pl", $gBrdName, $gDate, $file_uid_pass);

unlink "baha_cookie.txt";
unlink "post_info.txt";
